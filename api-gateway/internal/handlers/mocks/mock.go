// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victor-nach/todo/api-gateway/internal/handlers (interfaces: GRPCClient)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks github.com/victor-nach/todo/api-gateway/internal/handlers GRPCClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	todo "github.com/victor-nach/todo/proto/gen/go/todo"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGRPCClient is a mock of GRPCClient interface.
type MockGRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCClientMockRecorder
	isgomock struct{}
}

// MockGRPCClientMockRecorder is the mock recorder for MockGRPCClient.
type MockGRPCClientMockRecorder struct {
	mock *MockGRPCClient
}

// NewMockGRPCClient creates a new mock instance.
func NewMockGRPCClient(ctrl *gomock.Controller) *MockGRPCClient {
	mock := &MockGRPCClient{ctrl: ctrl}
	mock.recorder = &MockGRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCClient) EXPECT() *MockGRPCClientMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockGRPCClient) CreateTodo(ctx context.Context, in *todo.CreateTodoRequest, opts ...grpc.CallOption) (*todo.TodoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTodo", varargs...)
	ret0, _ := ret[0].(*todo.TodoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockGRPCClientMockRecorder) CreateTodo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockGRPCClient)(nil).CreateTodo), varargs...)
}

// DeleteTodo mocks base method.
func (m *MockGRPCClient) DeleteTodo(ctx context.Context, in *todo.DeleteTodoRequest, opts ...grpc.CallOption) (*todo.DeleteTodoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTodo", varargs...)
	ret0, _ := ret[0].(*todo.DeleteTodoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockGRPCClientMockRecorder) DeleteTodo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockGRPCClient)(nil).DeleteTodo), varargs...)
}

// GetTodo mocks base method.
func (m *MockGRPCClient) GetTodo(ctx context.Context, in *todo.GetTodoRequest, opts ...grpc.CallOption) (*todo.TodoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTodo", varargs...)
	ret0, _ := ret[0].(*todo.TodoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockGRPCClientMockRecorder) GetTodo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockGRPCClient)(nil).GetTodo), varargs...)
}

// ListTodos mocks base method.
func (m *MockGRPCClient) ListTodos(ctx context.Context, in *todo.ListTodosRequest, opts ...grpc.CallOption) (*todo.ListTodosResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTodos", varargs...)
	ret0, _ := ret[0].(*todo.ListTodosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodos indicates an expected call of ListTodos.
func (mr *MockGRPCClientMockRecorder) ListTodos(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodos", reflect.TypeOf((*MockGRPCClient)(nil).ListTodos), varargs...)
}

// UpdateTodo mocks base method.
func (m *MockGRPCClient) UpdateTodo(ctx context.Context, in *todo.UpdateTodoRequest, opts ...grpc.CallOption) (*todo.TodoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTodo", varargs...)
	ret0, _ := ret[0].(*todo.TodoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockGRPCClientMockRecorder) UpdateTodo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockGRPCClient)(nil).UpdateTodo), varargs...)
}
